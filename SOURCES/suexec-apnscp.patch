--- httpd-2.4.34-orig/support/suexec.c	2018-05-30 15:09:00.000000000 -0400
+++ httpd-2.4.34/support/suexec.c	2018-07-18 00:46:16.265750587 -0400
@@ -87,6 +87,7 @@
 /* Non-syslog support. */
 static FILE *log = NULL;
 #endif
+static char *site_root = 0;
 
 static const char *const safe_env_lst[] =
 {
@@ -112,6 +113,8 @@
     "LAST_MODIFIED=",
     "PATH_INFO=",
     "PATH_TRANSLATED=",
+    "PYTHONPATH=",
+    "PERL5LIB=",
     "QUERY_STRING=",
     "QUERY_STRING_UNESCAPED=",
     "REMOTE_ADDR=",
@@ -140,6 +143,7 @@
     "SERVER_PROTOCOL=",
     "SERVER_SIGNATURE=",
     "SERVER_SOFTWARE=",
+    "SITE_ROOT=",
     "UNIQUE_ID=",
     "USER_NAME=",
     "TZ=",
@@ -153,7 +157,41 @@
 static void err_output(int is_error, const char *fmt, va_list ap) 
     __attribute__((format(printf,2,0)));
 
-static void err_output(int is_error, const char *fmt, va_list ap)
+
+static void log_close()
+{
+    /* Be sure to close the log file so the CGI can't mess with it. */
+#ifdef AP_LOG_SYSLOG
+    if (log_open) {
+        closelog();
+        log_open = 0;
+    }
+#else
+    if (log != NULL) {
+#if APR_HAVE_FCNTL_H
+        /*
+         * ask fcntl(2) to set the FD_CLOEXEC flag on the log file,
+         * so it'll be automagically closed if the exec() call succeeds.
+         */
+        fflush(log);
+        setbuf(log, NULL);
+        if ((fcntl(fileno(log), F_SETFD, FD_CLOEXEC) == -1)) {
+            log_err("error: can't set close-on-exec flag");
+            exit(122);
+        }
+#else
+        /*
+         * In this case, exec() errors won't be logged because we have already
+         * dropped privileges and won't be able to reopen the log file.
+         */
+        fclose(log);
+        log = NULL;
+#endif
+    }
+#endif
+}
+
+static void log_open() 
 {
 #if defined(AP_LOG_SYSLOG)
     if (!log_open) {
@@ -163,9 +201,6 @@
 
     vsyslog(is_error ? LOG_ERR : LOG_INFO, fmt, ap);
 #elif defined(AP_LOG_EXEC)
-    time_t timevar;
-    struct tm *lt;
-
     if (!log) {
 #if defined(_LARGEFILE64_SOURCE) && HAVE_FOPEN64
         if ((log = fopen64(AP_LOG_EXEC, "a")) == NULL) {
@@ -177,6 +212,18 @@
             exit(1);
         }
     }
+#endif
+}
+
+static void err_output(int is_error, const char *fmt, va_list ap)
+{
+#if defined(AP_LOG_SYSLOG)
+    vsyslog(is_error ? LOG_ERR : LOG_INFO, fmt, ap);
+#elif defined(AP_LOG_EXEC)
+    time_t timevar;
+    struct tm *lt;
+
+    log_open();
 
     if (is_error) {
         fprintf(stderr, "suexec policy violation: see suexec log for more "
@@ -362,12 +409,12 @@
      */
 #ifdef _OSD_POSIX
     /* User name comparisons are case insensitive on BS2000/OSD */
-    if (strcasecmp(AP_HTTPD_USER, pw->pw_name)) {
+    if (pw->pw_uid > 0 && strcasecmp(AP_HTTPD_USER, pw->pw_name)) {
         log_err("user mismatch (%s instead of %s)\n", pw->pw_name, AP_HTTPD_USER);
         exit(103);
     }
 #else  /*_OSD_POSIX*/
-    if (strcmp(AP_HTTPD_USER, pw->pw_name)) {
+    if (pw->pw_uid > 0 && strcmp(AP_HTTPD_USER, pw->pw_name)) {
         log_err("user mismatch (%s instead of %s)\n", pw->pw_name, AP_HTTPD_USER);
         exit(103);
     }
@@ -392,7 +439,6 @@
      */
     if (!strncmp("~", target_uname, 1)) {
         target_uname++;
-        userdir = 1;
     }
 
     /*
@@ -465,6 +511,93 @@
     uid = pw->pw_uid;
     actual_uname = strdup(pw->pw_name);
     target_homedir = strdup(pw->pw_dir);
+
+    /*
+     * Chroot if SITE_ROOT is set
+     * FastCGI requests do not pass SetEnv vars from Apache
+     */ 
+    if (0 != (site_root = (char*)getenv("SITE_ROOT"))) {
+        char *tmp;
+        if (getcwd(cwd, AP_MAXPATH) == NULL) {
+            log_err("emerg: cannot get current working directory\n");
+            exit(111);
+        }
+        
+        if (strncmp(cwd, site_root, strlen(site_root)) != 0
+            || (*(tmp = cwd + strlen(site_root)) && *tmp != '/')) 
+        {
+            log_err("error: working dir not in site root: (%s) (%s)\n", cwd, site_root);
+            exit(122);
+        }
+
+        /*
+         * passwd and group dbs are reopened once chrooted
+         */
+        endpwent();
+        endgrent();
+
+        if (chroot(site_root) != 0) {
+            log_err("error: cannot chroot to site root: (%s)\n", site_root);
+            exit(122);
+        }
+        
+        log_open();
+        if (getcwd(cwd, AP_MAXPATH) == NULL) {
+            log_err("cannot get current working directory\n");
+            exit(111);
+        }
+            
+        /**
+         * Accounts can support multiple uids for suexec
+         */
+        if (!strncmp("/home", cwd, 5)) {
+            char *user;
+            char *p = strstr(cwd + 1, "/");
+            int len = p - cwd - 2;
+            user = strndup(cwd+6, len);
+            pw  = getpwnam(user);
+            log_err("test: %s\n", user);
+            if (pw == NULL) {
+                log_err("crit: user (%s) UID invalid in site root: (%d)\n", user, uid);
+                exit(102);
+            }
+            uid  = pw->pw_uid;
+            sprintf(target_uname, "%d", uid);
+            userdir = 1;
+        } else if (NULL == (pw = getpwuid(uid))) {
+            log_err("crit: UID invalid in site root: (%d)\n",  uid);
+            exit(102);
+        }
+
+        actual_uname = strdup(pw->pw_name);
+        target_homedir = strdup(pw->pw_dir);
+        if (NULL == (gr = getgrgid(gid))) {
+            log_err("crit: GID invalid in sie root: (%d)\n", gid);
+            exit(106);
+        }
+        actual_gname = strdup(gr->gr_name);
+    }
+
+	char *newenv = malloc(strlen(cwd) + strlen(cmd) + 18);
+	sprintf(newenv, "SCRIPT_FILENAME=%s/%s", cwd, cmd);
+	putenv(newenv);
+    
+    /*
+     * Get the current working directory, as well as the proper
+     * document root (dependant upon whether or not it is a
+     * ~userdir request).  Error out if we cannot get either one,
+     * or if the current working directory is not in the docroot.
+     * Use chdir()s and getcwd()s to avoid problems with symlinked
+     * directories.  Yuck.
+     *
+     * cwd is properly populated if SITE_ROOT env is set
+     */
+    if (!site_root && getcwd(cwd, AP_MAXPATH) == NULL) {
+        log_err("cannot get current working directory\n");
+        exit(111);
+    }
+
+
     if (actual_uname == NULL || target_homedir == NULL) {
         log_err("failed to alloc memory\n");
         exit(126);
@@ -539,10 +672,9 @@
         }
     }
     else {
-        if (((chdir(AP_DOC_ROOT)) != 0) ||
-            ((getcwd(dwd, AP_MAXPATH)) == NULL) ||
+        if (((getcwd(dwd, AP_MAXPATH)) == NULL) ||
             ((chdir(cwd)) != 0)) {
-            log_err("cannot get docroot information (%s)\n", AP_DOC_ROOT);
+            log_err("cannot get docroot information (%s)\n", cwd);
             exit(113);
         }
     }
@@ -628,35 +760,7 @@
     umask(AP_SUEXEC_UMASK);
 #endif /* AP_SUEXEC_UMASK */
 
-    /* Be sure to close the log file so the CGI can't mess with it. */
-#ifdef AP_LOG_SYSLOG
-    if (log_open) {
-        closelog();
-        log_open = 0;
-    }
-#else
-    if (log != NULL) {
-#if APR_HAVE_FCNTL_H
-        /*
-         * ask fcntl(2) to set the FD_CLOEXEC flag on the log file,
-         * so it'll be automagically closed if the exec() call succeeds.
-         */
-        fflush(log);
-        setbuf(log, NULL);
-        if ((fcntl(fileno(log), F_SETFD, FD_CLOEXEC) == -1)) {
-            log_err("error: can't set close-on-exec flag");
-            exit(122);
-        }
-#else
-        /*
-         * In this case, exec() errors won't be logged because we have already
-         * dropped privileges and won't be able to reopen the log file.
-         */
-        fclose(log);
-        log = NULL;
-#endif
-    }
-#endif
+    log_close();
 
     /*
      * Execute the command, replacing our image with its own.
